version: '3.8'

services:
  app:
    image: mma-platform:latest
    container_name: mma-platform-app-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=${DB_USERNAME:-postgres}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_NAME=${DB_NAME:-mma_platform}
      - PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:14-alpine
    container_name: mma-platform-db-prod
    environment:
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-mma_platform}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-sql:/docker-entrypoint-initdb.d:ro
    networks:
      - mma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-mma_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: mma-platform-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - mma-network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local

networks:
  mma-network:
    driver: bridge
